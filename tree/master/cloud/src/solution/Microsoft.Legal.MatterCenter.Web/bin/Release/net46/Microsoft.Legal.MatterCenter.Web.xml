<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Legal.MatterCenter.Web</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
             This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Startup.CheckAuthorization(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            check the current request and check whether the request is having the bearer token. If bearer token
            is present it will validate the same and if it is not present, the api will throw 401 unauthorized error
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.DocumentProvision.GetMailAsStream(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String[],System.Boolean)">
            <summary>
            Forms the memory stream of the mail with attachments.
            </summary>
            <param name="collectionOfAttachments">Collection of attachments as dictionary</param>
            <returns>Memory stream of the created mail object</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.DocumentProvision.ReturnExtension(System.String)">
            <summary>
            Gets the file content type based on specified extensions.
            </summary>
            <param name="fileExtension">Extension of the file</param>
            <returns>File content type</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.EditFunctions.ValidateFullControlPermission(Microsoft.Legal.MatterCenter.Models.Matter)">
            <summary>
            Validates if there is at-least one user with full control in assign list.
            </summary>
            <param name="matter">Matter object</param>
            <returns>Status of Full Control permission</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.KeyVaultHelper.#ctor(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.KeyVaultHelper.GetKeyVaultSecretsCerticate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.KeyVaultHelper.GetKeyVaultSecretsSecret">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.KeyVaultHelper.retrieveSecrets(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.KeyVaultHelper.GetToken(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            Uses the Client Secret and ClientID to get a token to the AD
            <param name="authority"></param>
            <param name="resource"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.KeyVaultHelper.GetCert(Microsoft.Extensions.Configuration.IConfiguration)">
             <summary>
            
             </summary>
             <param name="configurtaion"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.KeyVaultHelper.GetAccessToken(System.String,System.String,System.String)">
            <summary>
            Uses the ClientId and Screet to get an AD tokenok
            
            </summary>
            <param name="authority"></param>
            <param name="resource"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision">
            <summary>
            Matter Provision is a helper class which contains all methods related to matter such as matter search, matter provision, document upload to matter
            functionality
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.#ctor(Microsoft.Legal.MatterCenter.Repository.IMatterRepository,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.MatterSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Legal.MatterCenter.Utility.ISPOAuthorization,Microsoft.Legal.MatterCenter.Web.Common.IEditFunctions,Microsoft.Legal.MatterCenter.Web.Common.IValidationFunctions,Microsoft.Legal.MatterCenter.Utility.ICustomLogger,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.LogTables},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.MailSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.CamlQueries},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ListNames},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.GeneralSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.SearchSettings},Microsoft.Legal.MatterCenter.Repository.IUserRepository,Microsoft.Legal.MatterCenter.Repository.IExternalSharing,Microsoft.Extensions.Configuration.IConfigurationRoot,Microsoft.Legal.MatterCenter.Repository.IUsersDetails)">
            <summary>
            Constructor where all the dependencies are injected
            </summary>
            <param name="matterRepositoy"></param>
            <param name="matterSettings"></param>
            <param name="errorSettings"></param>
            <param name="spoAuthorization"></param>
            <param name="editFunctions"></param>
            <param name="validationFunctions"></param>
            <param name="customLogger"></param>
            <param name="logTables"></param>
            <param name="mailSettings"></param>
            <param name="camlQueries"></param>
            <param name="listNames"></param>
            <param name="generalSettings"></param>
            <param name="searchSettings"></param>
            <param name="userRepositoy"></param>
            <param name="externalSharing"></param>
            <param name="configuration"></param>
            <param name="userDetails"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.SaveConfigurations(Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
            This method will save matter configurations in sharepoint list
            </summary>
            <param name="matterConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.CanCreateMatter(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            This method will check whether login user can create matter or not
            </summary>
            <param name="client">The sharepoint site collection in which we need to check whether the login user is present in the sharepoint group or not</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.TrimMatterNameForOneNoteTitle(System.String)">
            <summary>
            Function to prepare OneNote URL based on threshold set for OneNote title
            </summary>
            <param name="matterName">Project name</param>
            <returns>OneNote title for provided Project name</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.CopyRoleAssignment(System.String,System.String)">
            <summary>
            Checks whether to retain previous users while breaking permission
            </summary>
            <param name="conflictIdentified">Conflict identified information</param>
            <param name="matterSecured">Security information</param>
            <returns>Flag to indicate whether to retain the previous users</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.ExtractMatterDetails(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Extracts matter details from matter library property bag.
            </summary>
            <param name="stampedPropertyValues">Dictionary object containing matter property bag key/value pairs</param>
            <returns>Matter details from matter library property bag</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.GetMatterAssignedUsers(System.String)">
            <summary>
            Retrieves the users assigned to matter.
            </summary>
            <param name="matterCenterUsers">Users tagged with matter in property bag</param>
            <returns>Users assigned to matter</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.GetStampPropertyValue(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Checks if the property exists in property bag. Returns the value for the property from property bag.
            </summary>
            <param name="stampedPropertyValues">Dictionary object containing matter property bag key/value pairs</param>
            <param name="key">Key to check in dictionary</param>
            <returns>Property bag value for </returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.GetUserList(System.String)">
            <summary>
            Gets the user list from the data sent in Matter Configurations
            </summary>
            <param name="matterUsers">Matter Users list</param>
            <returns>Users list</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.ShareMatter(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM,System.String)" -->
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.ShareMatterUtility(Microsoft.Legal.MatterCenter.Models.Client,Microsoft.Legal.MatterCenter.Models.Matter,Microsoft.Legal.MatterCenter.Models.MatterDetails,System.String,System.String,System.String,Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
            Function to share the matter.
            </summary>
            <param name="requestObject">Request Object containing SharePoint App Token</param>
            <param name="client">Client object containing Client data</param>
            <param name="matter">Matter object containing Matter data</param>
            <param name="subAreaOfLawList">String contains all sub area of law</param>
            <param name="mailListURL">URL contains list of mail recipients</param>
            <returns>Result of operation: Matter Shared successfully or not</returns>        
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.SerializeMatterToTableStorage(Microsoft.Legal.MatterCenter.Models.MatterInformationVM)">
            <summary>
            This method will store external requests information in Azure Table Storage
            </summary>
            <param name="externalSharingRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.GenerateMailList(Microsoft.Legal.MatterCenter.Models.Matter,Microsoft.Legal.MatterCenter.Models.Client,System.Collections.Generic.List{Microsoft.SharePoint.Client.FieldUserValue}@)">
            <summary>
            Generates list of users for sending email.
            </summary>
            <param name="matter">Matter details</param>
            <param name="clientContext">SharePoint client context</param>
            <param name="userList">List of users associated with the matter</param>
            <returns>List of users to whom mail is to be sent</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.TeamMembersPermissionInformation(Microsoft.Legal.MatterCenter.Models.MatterDetails,System.String)">
            <summary>
            Provides the team members and their respective permission details.
            </summary>
            <param name="matterDetails">Matter Details object</param>
            <param name="mailBodyTeamInformation">Team members permission information</param>
            <returns>Team members permission information</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.SetStampProperty(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            Function to create dictionary object for stamp property 
            </summary>
            <param name="client">Client object containing Client data</param>
            <param name="matter">Matter object containing Matter data</param>
            <param name="matterDetails">Matter details object which has data of properties to be stamped</param>
            <returns>returns dictionary object</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.MatterProvision.ShareMatterToExtUser(Microsoft.Legal.MatterCenter.Models.MatterInformationVM)">
            <summary>
            This method will loop for all external users in the matterinformation object and
            will send notification to that external user
            </summary>
            <param name="matterInformation">Contains information about all external users, his roles and permissions</param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.#ctor(Microsoft.Legal.MatterCenter.Repository.ISPList,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.MatterSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Legal.MatterCenter.Repository.IMatterRepository,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ListNames},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.CamlQueries},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.GeneralSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.TaxonomySettings})">
            <summary>
            Do validation stuff
            </summary>
            <param name="spList"></param>
            <param name="matterSettings"></param>
            <param name="errorSettings"></param>
            <param name="matterRespository"></param>
            <param name="listNames"></param>
            <param name="camlQueries"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.CheckListExists(Microsoft.Legal.MatterCenter.Models.Client,System.String,Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
            Checks if the lists exist
            </summary>
            <param name="client"></param>
            <param name="matterName"></param>
            <param name="matterConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.IsMatterValid(Microsoft.Legal.MatterCenter.Models.MatterInformationVM,System.Int32,Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
            Check the matter is valid or not
            </summary>
            <param name="matterInformation"></param>
            <param name="methodNumber"></param>
            <param name="matterConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.RoleCheck(Microsoft.Legal.MatterCenter.Models.Matter)">
            <summary>
            Validates the roles for the matter and returns the validation status.
            </summary>
            <param name="matter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.ValidateClientInformation(Microsoft.Legal.MatterCenter.Models.Client,System.Int32)">
            <summary>
            Function to validate client information
            </summary>
            <param name="client">Client object</param>
            <param name="methodNumber">Number indicating which method needs to be validated</param>
            <returns>String that contains error message</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.MatterMetadataValidation(Microsoft.Legal.MatterCenter.Models.Matter,Microsoft.Legal.MatterCenter.Models.Client,System.Int32,Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
            Validates meta-data of a matter and returns the validation status (success/failure).
            </summary>
            <param name="matter"></param>
            <param name="client"></param>
            <param name="methodNumber"></param>
            <param name="matterConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.MatterNameValidation(Microsoft.Legal.MatterCenter.Models.Matter)">
            <summary>
            Validates the matter name.
            </summary>
            <param name="matter">Matter details</param>
            <returns>Matter details validation result</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.MatterDetailsValidation(Microsoft.Legal.MatterCenter.Models.Matter,Microsoft.Legal.MatterCenter.Models.Client,System.Int32,Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
             Validates details of a matter and returns the validation status.
            </summary>
            <param name="matter"></param>
            <param name="client"></param>
            <param name="methodNumber"></param>
            <param name="matterConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.CheckUserPermission(Microsoft.Legal.MatterCenter.Models.Matter)">
            <summary>
            Validates the permissions assigned to the users.
            </summary>
            <param name="matter">Matter object containing Matter data</param>
            <returns>A string value indicating whether validations passed or fail</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.ValidateContentType(Microsoft.Legal.MatterCenter.Models.Matter)">
            <summary>
            Validates content type for the matter.
            </summary>
            <param name="matter">Matter object containing Matter data</param>
            <returns>A string value indicating whether validations passed or fail</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.ValidationFunctions.ValidateFullControlPermission(Microsoft.Legal.MatterCenter.Models.Matter)">
            <summary>
            Validates if there is at-least one user with full control in assign list.
            </summary>
            <param name="matter">Matter object</param>
            <returns>Status of Full Control permission</returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.UpdateMatter(Microsoft.Legal.MatterCenter.Models.MatterInformationVM)">
            <summary>
            
            </summary>
            <param name="matterInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.UpdateMatterMetadata(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            
            </summary>
            <param name="matterMetadata"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.DeleteMatter(Microsoft.Legal.MatterCenter.Models.MatterVM)">
            <summary>
            
            </summary>
            <param name="matterVM"></param>
            <returns></returns>   
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.SavConfigurations(Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
            
            </summary>
            <param name="saveConfigurationsVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.GetStampedProperties(Microsoft.Legal.MatterCenter.Models.MatterVM)">
            <summary>
            
            </summary>
            <param name="matterVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.AssignUserPermissions(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            
            </summary>
            <param name="matterMetadata"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.AssignContentType(Microsoft.Legal.MatterCenter.Models.MatterMetadata)">
            <summary>
            
            </summary>
            <param name="matterMetadata"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.GetMatters(Microsoft.Legal.MatterCenter.Models.SearchRequestVM)">
            <summary>
            
            </summary>
            <param name="searchRequestVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.CheckMatterExists(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            
            </summary>
            <param name="matterMetadataVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.CheckSecurityGroupExists(Microsoft.Legal.MatterCenter.Models.MatterInformationVM)">
            <summary>
            
            </summary>
            <param name="matterInformationVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.CreateMatter(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            
            </summary>
            <param name="matterMetadataVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.CreateMatterLandingPage(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            
            </summary>
            <param name="matterMetadataVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.ShareMatterToExternalUser(Microsoft.Legal.MatterCenter.Models.MatterInformationVM)">
            <summary>
            
            </summary>
            <param name="matterInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.CanCreateMatter(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision.SaveConfigurations(Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
            The implementatioon of this method will save matter configutations in sharepoint list
            </summary>
            <param name="matterConfigurations"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.Common.IUploadHelperFunctions">
            <summary>
            Provide methods to perform document transfer functionalities.
            </summary>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions">
            <summary>
            Provide methods to perform document transfer functionalities.
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.DocumentExists(System.String,Microsoft.Legal.MatterCenter.Models.ContentCheckDetails,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.PerformContentCheck">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.Upload(Microsoft.Legal.MatterCenter.Models.Client,Microsoft.Legal.MatterCenter.Models.ServiceRequest,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String@,System.String)">
            <summary>
            Acts as entry point from service to place the request to upload email/attachment. Reads the web request headers and requests applicable methods based on headers.
            </summary>
            <param name="requestObject">The request object.</param>
            <param name="client">The client object</param>
            <param name="serviceRequest">The Service request object</param>
            <param name="soapRequest">The SOAP request</param>
            <param name="attachmentOrMailID">The attachment or mail identifier.</param>
            <param name="isMailUpload">Mail upload check</param>
            <param name="fileName">Name of the file.</param>
            <param name="folderPath">The folder path.</param>
            <param name="isFirstCall">Determines if it is first call or not</param>
            <param name="message">Reference object for the message to be returned</param>
            <param name="originalFileName">Original file name of the attachment</param>
            <returns>It returns a string object, that contains the execution status of the function.</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.UploadFilesMail(System.Boolean,System.Boolean,System.Boolean,System.String,System.Net.HttpWebResponse,System.Boolean,Microsoft.Legal.MatterCenter.Models.Client,System.String,System.String,System.String@)">
            <summary>
            Reads the XMLDocument and determines whether the request is to upload entire mail/attachment/.eml file/.msg file and calls respective method.
            </summary>
            <param name="isOverwrite">Overwrite check</param>
            <param name="documentLibraryName">Name of the document library</param>
            <param name="folderName">Name of the folder</param>
            <param name="webResponse">HTTP web response to get the response stream</param>
            <param name="isMailUpload">Mail Upload Flag</param>
            <param name="requestObject">request object for web</param>
            <param name="client">Service Client Object</param>
            <param name="fileName">Name of the file</param>
            <param name="folderPath">upload folder path</param>
            <param name="message">Reference object for the message to be returned</param>
            <returns>Returns whether File Uploaded successfully or failed</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.RetrieveNodeValue(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String,System.Boolean)" -->
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.RetrieveXMLDocument(System.Net.HttpWebResponse)">
            <summary>
            Retrieves stream from web page and loads in XML document.
            </summary>
            <param name="webResponse">HTTP web response to get the response stream</param>
            <returns>XML Document containing read values from Request</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.UploadEMLFile(System.String,Microsoft.Legal.MatterCenter.Models.Client,System.String,System.String,System.String@,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,Microsoft.Legal.MatterCenter.Models.MailMetaData@,System.Object@,System.String)">
            <summary>
            Uploads the .eml file to specified folder in matter library.
            </summary>
            <param name="documentLibraryName">Name of the document library</param>
            <param name="requestObject">web request object</param>
            <param name="client">Provider Service client Object</param>
            <param name="folderPath">target folder path for upload</param>
            <param name="fileName">File name</param>
            <param name="message">Reference object for the message to be returned</param>
            <param name="xmlDocument">XML document object having information for the attachment</param>
            <param name="nsmgr">XML Namespace object</param>
            <param name="mailMetaData">Mail metadata object storing property values</param>
            <param name="bytes">Array of bytes</param>
            <param name="extension">File extension object contains extension of file to be uploaded.</param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.UploadMail(Microsoft.Legal.MatterCenter.Models.Client,System.String,System.String,System.String,System.Xml.XmlDocument,System.String@)">
            <summary>
            Uploads the email to specified folder in matter library.
            </summary>
            <param name="requestObject">web request object</param>
            <param name="client">Provider Service client Object</param>
            <param name="folderPath">target folder path for upload</param>
            <param name="filename">Name of the file</param>
            <param name="documentLibraryName">Name of the document library</param>
            <param name="xmlDocument">Mail XML Content</param>
            <param name="message">Reference object for the message to be returned</param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.GetEmailProperties(System.Xml.XmlDocument,Microsoft.Legal.MatterCenter.Models.MailMetaData@)">
            <summary>
            Get properties of the Email being uploaded
            </summary>
            <param name="xmlDocument">XML Document containing read values from Request</param>
            <param name="mailMetaData">Mail metadata object</param>
            <returns>Array of bytes</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.UploadAttachedMailExtBlank(Microsoft.Legal.MatterCenter.Models.Client,System.String,System.String,System.String,System.Xml.XmlDocument,System.String@)">
            <summary>
            Uploads the .msg file to specified folder in matter library.
            </summary>
            <param name="requestObject">web request object</param>
            <param name="client">service client object</param>
            <param name="folderPath">target folder path</param>
            <param name="fileName">Name of the file.</param>
            <param name="documentLibraryName">Name of the document library</param>
            <param name="xmlDocument">XML Document containing read values from Request</param>
            <param name="message">Reference object for the message to be returned</param> 
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.GetMailProperties(Microsoft.Legal.MatterCenter.Models.MailXPath,Microsoft.Legal.MatterCenter.Models.MailMetaData@,System.Xml.XmlDocument)">
            <summary>
            Get properties of the mail file to be uploaded
            </summary>
            <param name="mailXPath">Mail Xpath object</param>
            <param name="mailMetaData">Mail metadata object</param>
            <param name="xmlDocument">XML Document containing read values from Request</param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.GetRecipientsField(System.Xml.XmlNodeList)">
            <summary>
            To get recipients field from the Email headers
            </summary>
            <param name="xmlNodeList">Collection of nodes</param>
            <returns>Property value</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.GetPropertyValueFromXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            To get property value from the XML node
            </summary>
            <param name="xPath">XPath query</param>
            <param name="document">XML Document containing read values from Request</param>
            <param name="namespaceManager">Namespace manager object</param>
            <returns>Property value</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.GetShortDateFromField(System.String)">
            <summary>
            To get the short date from the field retrieved from headers
            </summary>        
            <param name="xmlNode">Representing node from XML document</param>
            <returns>Short date format</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.UploadToFolder(Microsoft.Legal.MatterCenter.Models.Client,System.String,System.String,System.String,System.IO.MemoryStream,System.String,Microsoft.Legal.MatterCenter.Models.MailMetaData,System.String@)">
            <summary>
            Validates the email/attachment and request call to upload the content to specified folder in matter library.
            </summary>
            <param name="requestObject">The Web request object.</param>
            <param name="client">The Service client.</param>
            <param name="folderPath">The folder path.</param>
            <param name="filename">The filename</param>
            <param name="extension">File extension</param>
            <param name="memoryStream">Memory stream object</param>
            <param name="mailMetaData">MailMetadata object</param>
            <param name="documentLibraryName">Name of the document library</param>
            <param name="message">Reference object for the message to be returned</param>
            <returns>
            Returns True if upload is successful or False if upload fails
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.UploadFolderUtility(Microsoft.Legal.MatterCenter.Models.Client,System.String,System.String@,System.String,System.IO.MemoryStream,Microsoft.Legal.MatterCenter.Models.MailMetaData,System.String,System.String@,Microsoft.SharePoint.Client.ClientContext)" -->
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.CreateFileInsideFolder(System.String,System.String,System.String,System.IO.MemoryStream,Microsoft.SharePoint.Client.ClientContext)">
            <summary>
            To create file inside SharePoint folder
            </summary>
            <param name="folderPath">Folder path</param>
            <param name="filename">Filename</param>
            <param name="extension">Extension</param>
            <param name="memoryStream">Stream of the memory</param>
            <param name="clientContext">ClientContext object</param>
            <returns>filename</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctions.SaveFields(Microsoft.Legal.MatterCenter.Models.Client,System.String,System.String,Microsoft.Legal.MatterCenter.Models.MailMetaData,System.String)">
            <summary>
            Saves the fields for uploaded item in SharePoint library.
            </summary>
            <param name="requestObject">Web request object</param>
            <param name="client">Provider Service client</param>
            <param name="folderPath"> folder path</param>
            <param name="fileName">Name of the file</param>
            <param name="mailMetadata">MailMetadata object</param>
            <param name="documentLibraryName">Name of the document library</param>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctionsUtility">
            <summary>
            Provide methods to perform document transfer functionalities.
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctionsUtility.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.MailSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Legal.MatterCenter.Repository.IDocumentRepository,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.GeneralSettings})">
            <summary>
            Handle the upload functionality.
            </summary>
            <param name="mailSettings"></param>
            <param name="errorSettings"></param>
            <param name="documentRepository"></param>
            <param name="generalSettings"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctionsUtility.CheckDuplicateDocument(Microsoft.SharePoint.Client.ClientContext,System.String,System.Boolean,System.String,Microsoft.Legal.MatterCenter.Models.ContentCheckDetails,System.String,System.Boolean,System.String@)">
            <summary>
            Check if duplicate document exists 
            </summary>
            <param name="clientContext">SP client context</param>
            <param name="documentLibraryName">Name of the document library</param>
            <param name="isMailUpload">Mail upload check</param>
            <param name="folderPath">The folder path.</param>
            <param name="contentCheck">Content check object</param>
            <param name="uploadFileName">Name of the file.</param>
            <returns>message as per duplicate exists or not</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctionsUtility.PerformContentCheckUtility(System.Boolean,System.String,System.Boolean,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String,System.String,Microsoft.SharePoint.Client.ClientContext)">
            <summary>
            Performs content check
            </summary>
            <param name="isMailUpload">Mail upload check</param>
            <param name="folderPath">The folder path.</param>
            <param name="isMsg">Is .msg file</param>
            <param name="xmlDocument">XML document object having information for the attachment</param>
            <param name="nsmgr">XML Namespace object</param>
            <param name="extension">File extension</param>
            <param name="uploadFileName">Name of the file.</param>
            <param name="clientContext">SP client context</param>
            <returns>result message as per document matches or not</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctionsUtility.GetStream(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.Boolean,System.String,System.Boolean)">
            <summary>
            returns stream from exchange
            </summary>
            <param name="xmlDocument">XML document object having information for the attachment</param>
            <param name="nsmgr">XML Namespace object</param>
            <param name="isMailUpload">Mail upload check</param>
            <param name="extension">File extension</param>
            <param name="isMsg">Is .msg file</param>
            <returns>stream in byte array</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctionsUtility.GetWebResponse(System.Uri,System.String,System.String,System.String)">
            <summary>
            Make the request to the Exchange server and get the response.
            </summary>
            <param name="ewsUrl">Exchange Web Service URL.</param>
            <param name="attachmentToken">The attachment token.</param>
            <param name="soapRequest">The SOAP request.</param>
            <param name="attachmentOrMailID">The attachment or mail identifier.</param>
            <returns>HTTP-specific response from Exchange server</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctionsUtility.GetAttachmentID(System.Xml.XmlDocument,System.String)">
            <summary>
            Get the Attachment ID from the web response
            </summary>
            <param name="xmlDocument">XML document object having information for mail contents</param>
            <param name="fileName">Name of the file.</param>
            <returns>The attachment identifier retrieved from the web response.</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Common.UploadHelperFunctionsUtility.RemoveSpecialChar(System.String)">
            <summary>
            Removes not allowed characters from SharePoint file name.
            </summary>
            <param name="filename">file name to be updated</param>
            <returns>Updated file name</returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.Controllers.ConfigController">
            <summary>
            Config settings
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Controllers.ConfigController.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.GeneralSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.UIConfigSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.LogTables},Microsoft.Legal.MatterCenter.Web.Common.IMatterCenterServiceFunctions,Microsoft.Legal.MatterCenter.Repository.IConfigRepository,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Constructor where all the required dependencies are injected
            </summary>
            <param name="errorSettings"></param>
            <param name="generalSettings"></param>
            <param name="uiConfigSettings"></param>
            <param name="configRepository"></param>
            <param name="logTables"></param>
            <param name="hostingEnvironment"></param>
            <param name="matterCenterServiceFunctions"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Controllers.ConfigController.Get(System.String)">
            <summary>
            Returns all the entries for Configuring the UI
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Controllers.ConfigController.GetConfigsForSPO(System.String)">
            <summary>
            Returns all the entries for Configuring the UI for sharepoint online
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Controllers.ConfigController.InsertUpdate(System.String)">
            <summary>
            Returns all the entries for Configuring the UI
            </summary>
            <param name="configs">Request object for POST</param>   
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.Controllers.ConfigController.CreateConfig(System.Collections.Generic.List{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity},System.String,System.Boolean)">
            <summary>
            Helper method which will create uiconfig.js or uiconfigforspo.js file
            </summary>
            <param name="configs"></param>
            <param name="fileName"></param>
            <param name="includeSPOLabels"></param>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.DocumentController">
            <summary>
            Document Controller class deals with finding document, 
            pinning document, unpinning the document etc.
            
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.DocumentSettings},Microsoft.Legal.MatterCenter.Web.Common.IMatterCenterServiceFunctions,Microsoft.Legal.MatterCenter.Repository.IDocumentRepository,Microsoft.Legal.MatterCenter.Utility.ICustomLogger,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.LogTables},Microsoft.Legal.MatterCenter.Web.Common.IDocumentProvision,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.GeneralSettings})">
            <summary>
            DcouemtsController Constructor where all the required dependencies are injected
            </summary>
            <remarks></remarks>        /// 
            <param name="errorSettings"></param>
            <param name="documentSettings"></param>
            <param name="matterCenterServiceFunctions"></param>
            <param name="documentRepositoy"></param>
            <param name="customLogger"></param>
            <param name="logTables"></param>
            <param name="documentProvision"></param>
            <param name="generalSettings"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.GetDocumentCounts(Microsoft.Legal.MatterCenter.Models.SearchRequestVM)">
            <summary>
            Get all counts for all documentCounts, my documentCounts and pinned documentCounts
            </summary>
            <remarks>Pass in the search request object which contains the information that will be passed to sharepoint search
            to get all counts for all documents, my documents and pinned documents</remarks>
            <param name="searchRequestVM">The search request object that has been find by the user to get results back for search criteria</param>
            <returns>IActionResult with proper http status code and the search results in JSON format</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.Get(Microsoft.Legal.MatterCenter.Models.SearchRequestVM)">
             <summary>
             Gets the documents based on search criteria.
             </summary>
            <remarks>Gets all the documents from sharepoint that has been uploaded by the user. 
            The user will get only the dcouments for which he or she has got the permissions</remarks>
            <example></example>
             <param name="searchRequestVM">The search request object that has been find by the user to get results back for search criteria</param>
             <returns>IActionResult with proper http status code and the search results in JSON format</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.GetPin(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            Get all the documents which are pinned by the logged in user
            </summary>
            <remarks>Gets all the documents which are pinned by the user</remarks>
            <param name="client">The SPO client url from which to retrieve all the documents which are pinnned by the requested user</param>
            <returns>IActionResult with proper http status code and the search results in JSON format</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.Pin(Microsoft.Legal.MatterCenter.Models.PinRequestDocumentVM)">
            <summary>
            This api will store the metadata of the document in a sharepoint list as a JSON object which is getting pinned
            </summary>
            <remarks>This api will pin a document along with its metadata</remarks>
            <param name="pinRequestDocumentVM">All the metadata associated with the doccument that is getting pinned</param>
            <returns>IActionResult which will return whether a document is pinned or not</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.UnPin(Microsoft.Legal.MatterCenter.Models.PinRequestDocumentVM)">
            <summary>
            This api will unpin the document which is already pinned and the unpinned document will be removed from the sharepoint 
            list object
            </summary>
            <remarks>This api will help the user to unpin a document which is already pinned</remarks>
            <param name="pinRequestDocumentVM">Information about the document which needs to be unpinned</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.GetDocumentAssets(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            This api will return document guid and list guid for the matter that has been selected
            </summary> 
            <remarks>From the document fly out menu, if the user clicks on "Open Document", this information will be used internally</remarks>
            <param name="client">Client object containing list data</param>        
            <returns>Document and list GUID</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.UploadAttachments(Microsoft.Legal.MatterCenter.Models.AttachmentRequestVM)">
            <summary>
            Uploads attachment which are there in the current mail item to SharePoint library.
            </summary>
            <remarks>When the user drag an attachment from the outlook add in, this api will be called</remarks>
            <param name="attachmentRequestVM">This object contains information about the attachment that is getting uploaded to sharepoint</param>
            <returns>IActionResult with file upload success or failure</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.UploadFiles">
            <summary>
            Uploads attachments from the user desktop to sharepoint library
            </summary>
            <remarks>This api will allow the user to upload from his desktop/laptop</remarks>
            <returns>IActionResult with the file upload success or failure</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.DocumentController.UploadMail(Microsoft.Legal.MatterCenter.Models.AttachmentRequestVM)">
            <summary>
            Uploads user selected email from outlook to SharePoint library with all the attachments
            </summary>
            <remarks>This api will allow the user to upload mail with attachments to the sharepoint document libarary associated to the matter</remarks>
            <param name="attachmentRequestVM"></param>
            <returns>IActionResult with mail upload failure or success</returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.EmailController">
            <summary>
            Document Controller class deals with finding document, pinning document, unpinning the document etc.
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.EmailController.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Legal.MatterCenter.Utility.ICustomLogger,Microsoft.Legal.MatterCenter.Web.Common.IMatterCenterServiceFunctions,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.LogTables},Microsoft.Legal.MatterCenter.Web.Common.IDocumentProvision,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.DocumentSettings})">
            <summary>
            Controlls the functionality for email related.
            </summary>
            <param name="errorSettings"></param>
            <param name="customLogger"></param>
            <param name="matterCenterServiceFunctions"></param>
            <param name="logTables"></param>
            <param name="documentProvision"></param>
            <param name="documentSettings"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.EmailController.DownloadAttachmentsAsStream(Microsoft.Legal.MatterCenter.Models.MailAttachmentDetails)">
            <summary>
             Gets the documents based on search criteria.
            </summary>
            <param name="mailAttachmentDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.EmailController.DownloadAttachments(Microsoft.Legal.MatterCenter.Models.MailAttachmentDetails)">
            <summary>
            For document attachment
            </summary>
            <param name="mailAttachmentDetails"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.SharedController">
            <summary>
            SharedController used for some common functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.SharedController.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.SharedSettings},Microsoft.Legal.MatterCenter.Web.Common.IMatterCenterServiceFunctions,Microsoft.Legal.MatterCenter.Utility.ICustomLogger,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.LogTables},Microsoft.Legal.MatterCenter.Repository.ISharedRepository)">
            <summary>
            
            </summary>
            <param name="errorSettings"></param>
            <param name="sharedSettings"></param>
            <param name="matterCenterServiceFunctions"></param>
            <param name="customLogger"></param>
            <param name="logTables"></param>
            <param name="sharedRepository"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.SharedController.UrlExists(Microsoft.Legal.MatterCenter.Models.Client,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <param name="oneNoteUrl"></param>
            <param name="matterLandingPageUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.SharedController.Help(Microsoft.Legal.MatterCenter.Models.HelpRequestModel)">
            <summary>
            
            </summary>
            <param name="helpRequestModel"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.TaxonomyController">
            <summary>
            Taxonomy Controller will read the term store information related to matter center
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.TaxonomyController.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.TaxonomySettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.GeneralSettings},Microsoft.Legal.MatterCenter.Web.Common.IMatterCenterServiceFunctions,Microsoft.Legal.MatterCenter.Repository.ITaxonomyRepository,Microsoft.Legal.MatterCenter.Utility.ICustomLogger,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.LogTables},Microsoft.Legal.MatterCenter.Web.Common.IValidationFunctions)">
            <summary>
            Constructor where all the required dependencies are injected
            </summary>
            <param name="errorSettings"></param>
            <param name="taxonomySettings"></param>
            <param name="generalSettings"></param>
            <param name="matterCenterServiceFunctions"></param>
            <param name="taxonomyRepository"></param>
            <param name="customLogger"></param>
            <param name="logTables"></param>
            <param name="validationFunctions"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.TaxonomyController.GetCurrentSiteTitle">
            <summary>
            This is test method for testing the contrroller
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.TaxonomyController.TestWebApi">
            <summary>
            This is test method for testing the contrroller
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Web.UserController">
            <summary>
            This controller will try to get all the user related information such as user roles, user permissions etc
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.UserController.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Legal.MatterCenter.Web.Common.IMatterCenterServiceFunctions,Microsoft.Legal.MatterCenter.Repository.IUserRepository,Microsoft.Legal.MatterCenter.Utility.ICustomLogger,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.LogTables},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.GeneralSettings})">
            <summary>
            constructor where are all the dependencies are injected
            </summary>
            <param name="errorSettings"></param>
            <param name="matterCenterServiceFunctions"></param>
            <param name="userRepositoy"></param>
            <param name="customLogger"></param>
            <param name="logTables"></param>
            <param name="generalSettings"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.UserController.GetUsers(Microsoft.Legal.MatterCenter.Models.SearchRequestVM)">
            <summary>
            Get all the users that are configured for a given client
            </summary>
            <param name="searchRequestVM"></param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.UserController.UserProfilePicture(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            Api to get user profile picture for the login user
            </summary>
            <param name="client"></param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.UserController.GetRoles(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            Get all the roles that are configured for a given client
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.UserController.GetPermissionLevels(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            Get all the permissions level that are configured for a given client
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Web.UserController.UserExists(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Service.MatterController">
            <summary>
            Matter Controller class deals with matter provisioning, finding matter, pinning matter, unpinning the matterm, updating the matter
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.ErrorSettings},Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.MatterSettings},Microsoft.Legal.MatterCenter.Web.Common.IMatterCenterServiceFunctions,Microsoft.Legal.MatterCenter.Repository.IMatterRepository,Microsoft.Legal.MatterCenter.Utility.ICustomLogger,Microsoft.Extensions.Options.IOptions{Microsoft.Legal.MatterCenter.Utility.LogTables},Microsoft.Legal.MatterCenter.Web.Common.IValidationFunctions,Microsoft.Legal.MatterCenter.Web.Common.IEditFunctions,Microsoft.Legal.MatterCenter.Web.Common.IMatterProvision)">
            <summary>
            Constructor where all the required dependencies are injected
            </summary>
            <param name="errorSettings"></param>
            <param name="matterSettings"></param>
            <param name="matterCenterServiceFunctions"></param>
            <param name="matterRepositoy"></param>
            <param name="customLogger"></param>
            <param name="logTables"></param>
            <param name="validationFunctions"></param>
            <param name="editFunctions"></param>
            <param name="matterProvision"></param>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.GetPin(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            Get all pinned matters which are pinned by the user
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.GetMatterCounts(Microsoft.Legal.MatterCenter.Models.SearchRequestVM)">
            <summary>
            Get all counts for all matters, my matters and pinned matters
            </summary>
            <param name="searchRequestVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.Pin(Microsoft.Legal.MatterCenter.Models.PinRequestMatterVM)">
            <summary>
            pin the matter
            </summary>
            <param name="pinRequestMatterVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.UnPin(Microsoft.Legal.MatterCenter.Models.PinRequestMatterVM)">
            <summary>
            Unpin the matter
            </summary>
            <param name="pinRequestMatterVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.Get(Microsoft.Legal.MatterCenter.Models.SearchRequestVM)">
            <summary>
            Gets the matters based on search criteria.
            </summary>
            <param name="searchRequestVM"></param>
            <returns>searchResponseVM</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.SaveConfigurations(Microsoft.Legal.MatterCenter.Models.MatterConfigurations)">
            <summary>
            Save configurations for a selected client
            </summary>        
            <param name="matterConfigurations">Client object containing Client data</param>        
            <returns>Returns JSON object to the client</returns>        
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.CanCreateMatter(Microsoft.Legal.MatterCenter.Models.Client)">
            <summary>
            This method will check whether the current login user can create a matter or not
            This method will check whether the user is present in the sharepoint group called "Provision Matter User"
            If the user is not present in the group, then "Create Matter" link should not be visible to the user
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.CheckMatterExists(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            This method will check whether a matter already exists with a given name
            </summary>
            <param name="matterMetadataVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.CheckSecurityGroupExists(Microsoft.Legal.MatterCenter.Models.MatterInformationVM)">
            <summary>
            This method will check whether a given security group already exists or not
            </summary>
            <param name="matterInformationVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.Update(Microsoft.Legal.MatterCenter.Models.MatterInformationVM)">
            <summary>
            This method will update a given matter information/configuration
            </summary>
            <param name="matterInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.Delete(Microsoft.Legal.MatterCenter.Models.MatterVM)">
            <summary>
            Assigns specified content types to the specified matter (document library).
            </summary>
            <param name="requestObject">Request Object containing SharePoint App Token</param>
            <param name="matterMetadata">Object containing metadata for Matter</param>
            <returns>true if success else false</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.Create(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            Create a new matter
            </summary>
            <param name="matterMetdataVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.AssignContentType(Microsoft.Legal.MatterCenter.Models.MatterMetadata)">
            <summary>
            Assigns specified content types to the specified matter (document library).
            </summary>
            <param name="requestObject">Request Object containing SharePoint App Token</param>
            <param name="matterMetadata">Object containing metadata for Matter</param>
            <returns>true if success else false</returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.AssignUserPermissions(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            This method will assign user permission to the matter
            </summary>
            <param name="matterMetadataVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.CreateLandingPage(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            Creates matter landing page. If there is any error in creating the landing page, the whole matter will get deleted along with document libraries
            </summary>
            <param name="matterMetdataVM"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.UpdateMetadata(Microsoft.Legal.MatterCenter.Models.MatterMetdataVM)">
            <summary>
            Updates matter metadata - Stamps properties to the created matter.
            </summary>
            <param name="matterMetdata"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.MatterController.ShareMatter(Microsoft.Legal.MatterCenter.Models.MatterInformationVM)">
            <summary>
            This method will assign user permission to the matter
            </summary>
            <param name="matterMetadataVM"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Legal.MatterCenter.Service.Filters.MatterCenterExceptionFilter">
            <summary>
            All unhandled exception in the matter center will be handled by this class. 
            This MatterCenterExceptionFilter will be added to StartUp.cs 
            </summary>
        </member>
        <member name="M:Microsoft.Legal.MatterCenter.Service.Filters.MatterCenterExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Implement OnException method of IExceptionFilter which will be invoked
            for all unhandled exceptions
            </summary>
            <param name="context"></param>
        </member>
    </members>
</doc>
